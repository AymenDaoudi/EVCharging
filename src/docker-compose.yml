name: data
services:

  postgres_db:
    build: 
      context: ./Postgres
      dockerfile: dockerfile
    container_name: postgres_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: initdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db-node-1:
    build:
      context: ./MongoDb/MongoNode
      dockerfile: dockerfile
    container_name: mongo-db-node-1
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo1
      - DB_NAME=Db
      - DB_USER=User
      - DB_PASS=Pass
      - REPLICASET_NAME=replica-set
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=InitDb
      - EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU=1 # This is required on Apple Silicon https://github.com/docker/for-mac/issues/6620
    ports:
      - 37001:30001
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: mongod --port 30001 --replSet replica-set --config /etc/mongod.conf --bind_ip_all
    restart: always
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet --port 30001 | grep 1
      interval: 20s
      timeout: 20s
      retries: 3
    volumes:
      - mongodb_data1:/data/db
      - ./MongoDb/Data:/data
    networks:
      - localnet

  mongo-db-node-2:
    build:
      context: ./MongoDb/MongoNode
      dockerfile: dockerfile
    container_name: mongo-db-node-2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo2
      - DB_NAME=Db
      - DB_USER=User
      - DB_PASS=Pass
      - REPLICASET_NAME=replica-set
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=InitDb
      - EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU=1 # This is required on Apple Silicon https://github.com/docker/for-mac/issues/6620
    ports:
      - 37002:30002
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: mongod --port 30002 --replSet replica-set --config /etc/mongod.conf --bind_ip_all
    restart: always
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet --port 30002 | grep 1
      interval: 20s
      timeout: 20s
      retries: 3
    volumes:
      - mongodb_data2:/data/db
      - ./MongoDb/Data:/data
    networks:
      - localnet

  mongo-db-node-3:
    build:
      context: ./MongoDb/MongoNode
      dockerfile: dockerfile
    container_name: mongo-db-node-3
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo3
      - DB_NAME=Db
      - DB_USER=User
      - DB_PASS=Pass
      - REPLICASET_NAME=replica-set
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=InitDb
      - EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU=1 # This is required on Apple Silicon https://github.com/docker/for-mac/issues/6620
    ports:
      - 37003:30003
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: mongod --port 30003 --replSet replica-set --config /etc/mongod.conf --bind_ip_all
    restart: always
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet --port 30003 | grep 1
      interval: 20s
      timeout: 20s
      retries: 3
    volumes:
      - mongodb_data3:/data/db
      - ./MongoDb/Data:/data
    networks:
      - localnet

  db-replicaset:
    build:
      context: ./MongoDb/MongoReplicaSet
      dockerfile: dockerfile
    container_name: replicaset_initializer
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=InitDb
    ports:
      - 37004:30004
    depends_on:
      mongo-db-node-1:
        condition: service_healthy
      mongo-db-node-2:
        condition: service_healthy
      mongo-db-node-3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 16s
      timeout: 16s
      retries: 3
    volumes:
      - mongodb_data4:/data/db
    networks:
      - localnet

  mongo-express:
    build:
      context: ./MongoDb/MongoExpress
      dockerfile: dockerfile
    container_name: db-explorer
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://User:Pass@mongo-db-node-1:30001,mongo-db-node-2:30002,mongo-db-node-3:30003/Db?replicaSet=replica-set
      - PORT=8082
        #ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_AUTH_DATABASE=Db
      - ME_CONFIG_MONGODB_AUTH_USERNAME=User
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=Pass
        #ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
    ports:
      - 8085:8082
    depends_on:
      mongo-db-node-1:
        condition: service_healthy
      mongo-db-node-2:
        condition: service_healthy
      mongo-db-node-3:
        condition: service_healthy
      db-replicaset:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - localnet

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    env_file:
      - path: ./Kafka/zookeeper/.env
    healthcheck:
      test: nc -z localhost 2181
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - localnet

  kafka:
    build: 
      context: ./Kafka/kafka-broker
      dockerfile: dockerfile
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    restart: always
    env_file:
      - path: ./Kafka/kafka-broker/.env
    healthcheck:
      test: ["CMD", "/etc/confluent/docker/healthcheck.sh"]
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - localnet
    
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:latest
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8081:8081"
  #   restart: always
  #   env_file:
  #     - path: ./Kafka/kafka-schema-registry/.env
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl --silent --fail http://localhost:8081/subjects || exit 1"]
  #     interval: 10s
  #     timeout: 20s
  #     retries: 5
  #   networks:
  #     - localnet

  kafka-connect:
    build: 
      context: ./Kafka/kafka-connect/
      dockerfile: dockerfile
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      # schema-registry:
      #   condition: service_healthy
      mongo-express:
        condition: service_healthy
    ports:
      - "8083:8083"
    restart: always
    env_file:
      - path: ./Kafka/kafka-connect/.env
    healthcheck:
      test: ["CMD", "/etc/confluent/docker/healthcheck.sh"]
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - localnet

  mongodb-source-connector:
    build: 
      context: ./Kafka/mongodb-source-connector/
      dockerfile: dockerfile
    hostname: mongodb-source-connector
    container_name: mongodb-source-connector
    restart: always
    depends_on:
      kafka-connect:
        condition: service_healthy
    networks:
      - localnet

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      # schema-registry:
      #   condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "9021:9021"
    restart: always
    env_file:
      - path: ./Kafka/kafka-control-center/.env
    networks:
      - localnet

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:latest
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - 8084:8084
  #   restart: always
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   env_file:
  #     - path: ./kafka-rest-proxy/.env

  charging-stations:
    build:
      context: ./ev_charging_app
      dockerfile: dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      db-replicaset:
        condition: service_healthy
    environment:
      SIM_DURATION: 100.0
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CHARGING_EVENTS_TOPIC: ev_charging_events
      MONGO_URI: mongodb://User:Pass@mongo-db-node-1:30001,mongo-db-node-2:30002,mongo-db-node-3:30003/Db?replicaSet=replica-set
    networks:
      - localnet

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: "azurite"
    hostname: azurite
    environment:
      - AZURITE_ACCOUNTS=datalake:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    depends_on:
      db-replicaset:
        condition: service_healthy
    restart: always
    ports:
      - "10010:10000"
    healthcheck:
      test: nc 127.0.0.1 10000 -z
      interval: 1s
      retries: 30
    networks:
      - localnet

  azurite-init:
    build:
      context: ./azurite
      dockerfile: dockerfile
    container_name: "azurite-init"
    depends_on:
      azurite:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - localnet

  spark-master:
    build:
      context: ./spark
      dockerfile: dockerfile_master
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CHARGING_EVENTS_TOPIC=ev_charging_events
      - SPARK_SUBMIT_OPTIONS=--conf spark.driver.memory=2g
      - SPARK_RPC_MESSAGE_MAXSIZE=1024
      - SPARK_NETWORK_TIMEOUT=300s
      - SPARK_DRIVER_EXTRA_JAVA_OPTIONS=-Dspark.maxRemoteBlockSizeFetchToMem=200m
      - SPARK_DRIVER_MAXRESULTSIZE=2g
      - SPARK_WORKER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"  # Spark Web UI
      - "7077:7077"  # Spark Master Port
    networks:
      - localnet

  spark-worker:
    build:
      context: ./spark
      dockerfile: dockerfile_worker
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CHARGING_EVENTS_TOPIC=ev_charging_events
      - SPARK_WORKER_MEMORY=2g
    ports:
      - "8081:8081"  # Spark Worker Web UI
    networks:
      - localnet

networks:
  localnet:
    driver: bridge

volumes:
  mongodb_data1:
  mongodb_data2:
  mongodb_data3:
  mongodb_data4: