name: data
services:
  mongo-db:
    build:
      context: ./MongoDb/MongoNode
      dockerfile: dockerfile
    container_name: mongo-db
    environment:
      - DB_NAME=Db
      - DB_USER=User
      - DB_PASS=Pass
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=InitDb
      - EXPERIMENTAL_DOCKER_DESKTOP_FORCE_QEMU=1 # This is required on Apple Silicon https://github.com/docker/for-mac/issues/6620
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: mongod --port 27017 --config /etc/mongod.conf --bind_ip_all
    restart: always
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet --port 27017 | grep 1
      interval: 20s
      timeout: 20s
      retries: 3
    volumes:
      - ./MongoDb/Data:/data
    networks:
      - localnet

  mongo-express:
    build:
      context: ./MongoDb/MongoExpress
      dockerfile: dockerfile
    container_name: db-explorer
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - PORT=8082
    ports:
      - 8085:8082
    depends_on:
      mongo-db:
        condition: service_healthy
    networks:
      - localnet

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    env_file:
      - path: ./Kafka/zookeeper/.env
    healthcheck:
      test: nc -z localhost 2181
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - localnet

  kafka:
    build: 
      context: ./Kafka/kafka-broker
      dockerfile: dockerfile
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    restart: always
    env_file:
      - path: ./Kafka/kafka-broker/.env
    healthcheck:
      test: ["CMD", "/etc/confluent/docker/healthcheck.sh"]
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - localnet

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9021:9021"
    restart: always
    env_file:
      - path: ./Kafka/kafka-control-center/.env
    networks:
      - localnet

  charging-stations:
    build:
      context: ./ev_charging_simulator
      dockerfile: dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
    environment:
      SIM_DURATION: 100.0
      CHARGING_STATIONS_TO_USE: 10
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      CHARGING_EVENTS_TOPIC: ev_charging_events
      MONGO_URI: mongodb://User:Pass@mongo-db:27017/Db
    volumes:
      - ./ev_charging_simulator/src:/src
    networks:
      - localnet

  spark-master:
    build:
      context: ./spark
      dockerfile: dockerfile_master
    container_name: spark-master
    environment:
      - SPARK_MASTER_HOST=spark-master
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"  # Spark Web UI
      - "7077:7077"  # Spark Master Port
    networks:
      - localnet

  spark-worker-1:
    build:
      context: ./spark
      dockerfile: dockerfile_worker
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"  # Spark Worker Web UI
    networks:
      - localnet

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - localnet

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/raw-data;
      mc mb myminio/checkpoints;
      exit 0;
      "
    networks:
      - localnet

  lakefs:
    build:
      context: ./lakefs
      dockerfile: dockerfile
    container_name: lakefs
    ports:
      - "8000:8000"
    environment:
      - LAKEFS_AUTH_USER_NAME=admin
      - LAKEFS_AUTH_USER_EMAIL=iaymendaoudidev@gmail.com
      - LAKEFS_AUTH_USER_PASSWORD=pass
      - LAKEFS_INSTALLATION_USER_NAME=admin
      - LAKEFS_INSTALLATION_USER_EMAIL=iaymendaoudidev@gmail.com
      - LAKEFS_INSTALLATION_USER_PASSWORD=pass
      - LAKEFS_INSTALLATION_ACCESS_KEY_ID=AKIAJBWUDLDFGJY36X3Q
      - LAKEFS_INSTALLATION_SECRET_ACCESS_KEY=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
      - LAKECTL_CREDENTIALS_ACCESS_KEY_ID=AKIAJBWUDLDFGJY36X3Q
      - LAKECTL_CREDENTIALS_SECRET_ACCESS_KEY=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
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_ACCESS_KEY_ID=minioadmin
      - LAKEFS_BLOCKSTORE_S3_CREDENTIALS_SECRET_ACCESS_KEY=minioadmin
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - localnet

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "18123:8123"  # HTTP interface - changed from 8123 to avoid conflict
      - "19000:9000"  # Native interface - changed from 9000 to avoid conflict
    environment:
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
      - CLICKHOUSE_DB=ev_charging
    volumes:
      - ./clickhouse/config:/etc/clickhouse-server/config.d
      - ./clickhouse/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - localnet

  ch-ui:
    image: ghcr.io/caioricciuti/ch-ui:latest
    restart: always
    ports:
      - "5521:5521"
    environment:
      - VITE_CLICKHOUSE_URL=http://localhost:18123
      - VITE_CLICKHOUSE_USER=admin
      - VITE_CLICKHOUSE_PASS=admin
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - localnet  

  airflow-postgres:
    image: postgres:latest
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    networks:
      - localnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: dockerfile
    container_name: airflow-webserver
    depends_on:
      airflow-postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE=0
      - AIRFLOW__WEBSERVER__WORKER_TIMEOUT=300
      - AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT=300
      - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=300
      - AIRFLOW__WEBSERVER__WORKERS=2
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
      - CLICKHOUSE_DATABASE=ev_charging
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/clickhouse:/opt/airflow/clickhouse
      - ./airflow/mongodb:/opt/airflow/mongodb
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8090:8080"
    command: >
      bash -c "airflow db migrate && 
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && 
      airflow webserver &
      sleep 60 &&
      /setup_connections.sh &&
      wait"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 30
    restart: always
    networks:
      - localnet

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: dockerfile
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
      - CLICKHOUSE_DATABASE=ev_charging
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/clickhouse:/opt/airflow/clickhouse
      - ./airflow/mongodb:/opt/airflow/mongodb
      - airflow_logs:/opt/airflow/logs
    command: airflow scheduler
    restart: always
    networks:
      - localnet

networks:
  localnet:
    driver: bridge

volumes:
  airflow_logs: